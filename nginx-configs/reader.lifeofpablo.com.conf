server
{
	server_name reader.lifeofpablo.com;

	# send all requests to the `/validate` endpoint for authorization
	auth_request /validate;

	location = /validate
	{
		# forward the /validate request to Vouch Proxy
		proxy_pass http://127.0.0.1:9090/validate;
		# be sure to pass the original host header
		proxy_set_header Host $http_host;

		# Vouch Proxy only acts on the request headers
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";

		# optionally add X-Vouch-User as returned by Vouch Proxy along with the request
		# auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

		# optionally add X-Vouch-IdP-Claims-* custom claims you are tracking
		#    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
		#    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
		# optinally add X-Vouch-IdP-AccessToken or X-Vouch-IdP-IdToken
		#    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;
		#    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;

		# these return values are used by the @error401 call
		auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
		auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
		auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;

		# Vouch Proxy can run behind the same Nginx reverse proxy
		# may need to comply to "upstream" server naming
		# proxy_pass http://vouch.yourdomain.com/validate;
		# proxy_set_header Host $http_host;
	}

	# if validate returns `401 not authorized` then forward the request to the error401block
	error_page 401 = @error401;

	location @error401
	{
		# redirect to Vouch Proxy for login
		return 302 https://auth.lifeofpablo.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
		# you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
		# but to get started you can just forward the end user to the port that vouch is running on
		# return 302 http://vouch.yourdomain.com:9090/login?url=https://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
	}

	location /
	{
		# forward authorized requests to your service protectedapp.yourdomain.com
		proxy_pass http://127.0.0.1:8085/;
		# you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
		# auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

		# set user header (usually an email)
		proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
		add_header X-Frame-Options SAMEORIGIN;
		add_header X-XSS-Protection "1; mode=block";
		proxy_redirect off;
		proxy_buffering off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Port $server_port;
		proxy_read_timeout 90;
	#	proxy_set_header Remote-User $auth_resp_x_vouch_user;


		# Forward the Authorization header for the Google Reader API.
		proxy_set_header Authorization $http_authorization;
		proxy_pass_header Authorization;
	}

	listen 443 ssl; # managed by Certbot
	ssl_certificate /etc/letsencrypt/live/reader.lifeofpablo.com/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/reader.lifeofpablo.com/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server
{
	if ($host = reader.lifeofpablo.com)
	{
		return 301 https://$host$request_uri;
		} # managed by Certbo

	# managed by Certbot


#	server_name reader.lifeofpablo.com;

	listen 80 http2;
	return 404; # managed by Certbot


}
