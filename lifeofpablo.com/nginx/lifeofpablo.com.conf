server {
    listen 80;
    server_name lifeofpablo.com;
    root /var/www/html;
    default_type text/html;
    index yellow.php index.html;
    
# Block common bots and crawlers
    if ($http_user_agent ~* "AhrefsBot|SemrushBot|Bytespider|Semrush|MJ12bot|YandexBot|YandexImages|MegaIndex.ru|BLEXbot|BLEXBot|ZoominfoBot|YaK|VelenPublicWebCrawler|SentiBot|Vagabondo|SEOkicks|SEOkicks-Robot|mtbot/1.1.0i|SeznamBot|DotBot|Cliqzbot|coccocbot|python|Scrap|SiteCheck-sitecrawl|MauiBot|Java|GumGum|Clickagy|AspiegelBot|Yandex|TkBot|CCBot|Qwantify|MBCrawler|serpstatbot|AwarioSmartBot|Semantici|ScholarBot|proximic|MojeekBot|GrapeshotCrawler|IAScrawler|linkdexbot|contxbot|PlurkBot|PaperLiBot|BomboraBot|Leikibot|weborama-fetcher|NTENTbot|Screaming Frog SEO Spider|admantx-usaspb|Eyeotabot|VoluumDSP-content-bot|SirdataBot|adbeat_bot|TTD-Content|admantx|Nimbostratus-Bot|Mail.RU_Bot|Quantcastboti|Onespot-ScraperBot|Taboolabot|Baidu|Jobboerse|VoilaBot|Sogou|Jyxobot|Exabot|ZGrab|Proximi|Sosospider|Accoona|aiHitBot|Genieo|BecomeBot|ConveraCrawler|NerdyBot|OutclicksBot|findlinks|JikeSpider|Gigabot|CatchBot|Huaweisymantecspider|Offline Explorer|SiteSnagger|TeleportPro|WebCopier|WebReaper|WebStripper|WebZIP|Xaldon_WebSpider|BackDoorBot|AITCSRoboti|Arachnophilia|BackRub|BlowFishi|perl|CherryPicker|CyberSpyder|EmailCollector|Foobot|GetURL|httplib|HTTrack|LinkScan|Openbot|Snooper|SuperBot|URLSpiderPro|MAZBot|EchoboxBot|SerendeputyBot|LivelapBot|linkfluence.com|TweetmemeBot|LinkisBot|CrowdTanglebot|Slurp|DuckDuckBot|Teoma|ia_archiver|Facebot|facebookexternalhit|Twitterbot") {
        return 403;
    }

     # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    location = /validate {
      # forward the /validate request to Vouch Proxy
      proxy_pass http://vp-lifeofpablo:9090/validate;

      # be sure to pass the original host header
      proxy_set_header Host $http_host;

      # Vouch Proxy only acts on the request headers
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";

      # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

      # these return values are used by the @error401 call
      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }


        # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

        location @error401 {
        # redirect to Vouch Proxy for login
            return 302 https://auth.lifeofpablo.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
        }
        location / {
            proxy_pass http://lifeofpablo/;
            # be sure to pass the original host header
		    proxy_set_header X-Real-IP $remote_addr;
             #  may need to set
      #    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
      #  in this bock as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
      # set user header (usually an email)
            proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
        }
    # Include the robots.txt file
    location = /robots.txt {
        alias /robots.txt;
    }

    location /content {
        rewrite ^(.*)$ /error break;
    }

    location /system {
        rewrite ^(.*)$ /error break;
    }

    location / {
        if (!-e $request_filename) {
            rewrite ^/(.*)$ /yellow.php last;
            break;
        }
    }



location /guestbook {
	try_files $uri $uri/ /index.php$is_args$args;
    }

location /guestbook/panel {
	rewrite ^/guestbook/public/panel(.*)$ https://auth.lifeofpablo.com/login?url=https://lifeofpablo.com/guestbook/public/index.php$1 redirect;
}

location /microblog {
	rewrite ^/microblog(.*)$ https://pablomorales.blog$1 redirect;
}



location /@pablo {
        rewrite ^/@pablo(.*)$ https://social.lifeofpablo.com/@pablo$1 redirect;
    }


location /twitter {
        rewrite ^/twitter(.*)$ https://twitter.com/thepablomorales/$1 redirect;
    }

location /korea {
        rewrite ^/korea(.*)$ https://korea.lifeofpablo.com$1 redirect;
    }

location /complaint-form {
        rewrite ^/complaint-form(.*)$ https://www.youtube.com/watch?v=dQw4w9WgXcQ/$1 redirect;
    }

location /first-website {
    try_files $uri $uri/ =404;
}

location /old-site {
    try_files $uri $uri/ =404;
}

location /first-website/images/ {
try_files $uri $uri/ =404;
}



location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
        fastcgi_index yellow.php;
        include fastcgi.conf;
}


}
